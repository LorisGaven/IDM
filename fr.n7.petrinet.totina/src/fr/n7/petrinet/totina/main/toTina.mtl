[comment encoding = UTF-8 /]
[module toTina('http://petrinet')]


[template public toTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name + '.net', false, 'UTF-8')]
net [aPetriNet.name /]
[let places : OrderedSet(Place) = aPetriNet.getPlaces()]
[for (p : Place | places)]
pl [p.name /] ([p.nbToken /])	
[/for]
[/let]
[let transitions : OrderedSet(Transition) = aPetriNet.getTransitions()]
[for (t : Transition | transitions)]
tr [t.name /] [ingoing(t.ingoing) /] -> [outgoing(t.outgoing) /]
[/for]
[/let]
[/file]
[/template]

[query public getPlaces(p: PetriNet) : OrderedSet(Place) = 
	p.nodes->select( e | e.oclIsTypeOf(Place) )
		->collect( e | e.oclAsType(Place) )
		->asOrderedSet()
/]

[query public getTransitions(p: PetriNet) : OrderedSet(Transition) = 
	p.nodes->select( e | e.oclIsTypeOf(Transition) )
		->collect( e | e.oclAsType(Transition) )
		->asOrderedSet()
/]

[template public ingoing(arcs : OrderedSet(Arc)) post (trim()) ]
	[for (a : Arc | arcs)][a.source.name/][if (a.kind = ArcKind::read)]?[a.weight/][elseif (a.weight > 1)]*[a.weight/][/if] [/for]
[/template]

[template public outgoing(arcs : OrderedSet(Arc)) post (trim()) ]
	[for (a : Arc | arcs)][a.target.name/][if (a.weight > 1)]*[a.weight/][/if] [/for]
[/template]
